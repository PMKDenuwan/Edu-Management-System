1. Course Management (Courses & Subjects relationship)

You already spotted it:

One course has multiple subjects

One subject can belong to many courses

ðŸ‘‰ This is a many-to-many relationship. In MongoDB, we typically solve this with references.

Example MongoDB Collections:

subjects

{
  "_id": "sub1",
  "name": "Java",
  "code": "SUB-JAVA-01"
}


courses

{
  "_id": "course1",
  "name": "Backend Developer",
  "subjects": ["sub1", "sub2", "sub3"] 
}


Here:

Course "Backend Developer" â†’ refers to subject IDs (Java, JavaScript, Springboot)

Subject "Java" can also be inside multiple coursesâ€™ subjects[].

2. Student Management (Students & Courses relationship)

One student can enroll in many courses.

One course can have many students.
ðŸ‘‰ Another many-to-many relationship.

students

{
  "_id": "stu1",
  "name": "John Doe",
  "regNo": "REG123",
  "contact": "0771234567",
  "courses": ["course1", "course2"] 
}


courses[] is an array of course IDs the student is enrolled in.

Later you can populate() in Mongoose to fetch full course details.

3. Lecturer Management (Lecturers & Subjects relationship)

One lecturer teaches many subjects

One subject can be taught by many lecturers

ðŸ‘‰ Another many-to-many relationship.

lecturers

{
  "_id": "lec1",
  "name": "Dr. Smith",
  "email": "smith@uni.edu",
  "subjects": ["sub1", "sub2"] 
}


subjects[] = IDs of subjects they handle.

4. Class Scheduling

A class session = Course + Subject + Lecturer + Date + Time.

classes

{
  "_id": "cls1",
  "courseId": "course1",
  "subjectId": "sub1",
  "lecturerId": "lec1",
  "date": "2025-09-01",
  "time": "09:00-11:00"
}


Each class document is an instance of a scheduled class session.

This lets you later tie attendance to that session.

5. Attendance Marking

Attendance is linked to a specific class session.

attendance

{
  "_id": "att1",
  "classId": "cls1",
  "studentId": "stu1",
  "status": "Present" 
}


For each scheduled class (cls1), create attendance entries for enrolled students.

status can be "Present" | "Absent" | "Late".

ðŸ‘‰ Later, reports are generated by filtering attendance by:

studentId (attendance history for a student)

classId (attendance for one session)

courseId or subjectId (overall attendance for a course/subject)

6. How Backend (Express + MongoDB) Should Behave

ðŸ‘‰ APIs to implement:

Auth (role-based login)

POST /auth/login â†’ returns token with role (Admin, Lecturer).

Course & Subject

POST /courses â†’ create new course with subjects

GET /courses â†’ list courses with subjects populated

POST /subjects â†’ create subjects

Students

POST /students â†’ enroll student in courses

GET /students/:id â†’ get student with populated courses

Lecturers

POST /lecturers â†’ assign lecturer to subjects

GET /lecturers/:id â†’ view subjects taught

Classes

POST /classes â†’ schedule new class (course + subject + lecturer + date)

GET /classes?date=2025-09-01 â†’ view classes for a day

Attendance

POST /attendance â†’ mark attendance (class + student + status)

GET /attendance/report?studentId=... â†’ attendance report

7. How Frontend (React) Should Behave

Admin dashboard:

Manage Courses (CRUD)

Manage Students (CRUD)

Manage Lecturers (CRUD)

Create Class Schedules

Lecturer dashboard:

View Assigned Subjects

View Upcoming Classes

Mark Attendance (table of enrolled students, tick "Present"/"Absent")

Student dashboard:

View Enrolled Courses

View Class Schedule

View Attendance History

8. User Journeys (Scenarios)
Scenario 1: Admin Adds a Course

Admin logs in â†’ selects Course Management.

Creates new course "Full Stack Developer" â†’ adds subjects (React, Java, Spring Boot).

Course is saved in DB with subject references.

Scenario 2: Student Enrollment

Admin registers student "John Doe".

Assigns him to courses â†’ "Backend Developer" and "Full Stack Developer".

Student record updated with courses[].

Scenario 3: Lecturer Assigned

Admin creates lecturer "Dr. Smith".

Assigns subjects "Java" and "Spring Boot".

Lecturer DB updated with subjects[].

Scenario 4: Class Scheduling

Admin selects Schedule Class.

Picks course = "Backend Developer", subject = "Java", lecturer = Dr. Smith, date = 01/09/2025.

A class document is created.

Scenario 5: Lecturer Marks Attendance

On class day, Dr. Smith logs in.

Sees todayâ€™s scheduled class ("Java - Backend Developer").

Opens student list (all students enrolled in that course).

Marks attendance for each student (Present/Absent).

Attendance entries saved in DB.

Scenario 6: Student Views Attendance

Student logs in.

Views Attendance Report â†’ shows:

Java â†’ 85% present

Spring Boot â†’ 70% present